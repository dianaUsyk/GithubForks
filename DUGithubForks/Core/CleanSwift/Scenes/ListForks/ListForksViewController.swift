//
//  ListForksViewController.swift
//  DUGithubForks
//
//  Created by Di on 30.11.2017.
//  Copyright (c) 2017 Di. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListForksDisplayLogic: class {
    func displayHeader(viewModel: ListForks.RepoHeader.ViewModel)
    func displayForks(viewModel: ListForks.FetchForks.ViewModel)
    func displaySelectedForkDetails(viewModel: ListForks.SelectFork.ViewModel)
}

class ListForksViewController: UITableViewController {

    var interactor: ListForksBusinessLogic?
    var router: (NSObjectProtocol & ListForksRoutingLogic & ListForksDataPassing)?

    var displayedForks = [ListForks.Fork]()

    lazy var headerView: AvatarHeaderView = {
        return AvatarHeaderView.headerView()
    }()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        registerCell()
        loadHeaderView()
        updateHeaderOnLoad()
        fetchForks()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        headerView.animate()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        
        ImagesStore.drain()
    }
}

fileprivate typealias ListForksDisplay = ListForksViewController
extension ListForksDisplay: ListForksDisplayLogic {
    func displayHeader(viewModel: ListForks.RepoHeader.ViewModel) {
        setupHeader(viewModel: viewModel)
    }

    func displayForks(viewModel: ListForks.FetchForks.ViewModel) {
        
        let lastRow = displayedForks.count
        displayedForks.append(contentsOf: viewModel.forks)
        
        var indexPaths = [IndexPath]()
        for index in 0..<viewModel.forks.count {
            indexPaths.append(IndexPath(row: index + lastRow, section: 0))
        }
        
        tableView.insertRows(at: indexPaths, with: .none)
    }

    func displaySelectedForkDetails(viewModel: ListForks.SelectFork.ViewModel) {
        router?.routeToSelectedFork(segue: nil)
    }
}

fileprivate typealias Interaction = ListForksViewController
extension Interaction {
    fileprivate func updateHeaderOnLoad() {
        let request = ListForks.RepoHeader.Request()
        interactor?.updateHeaderOnLoad(request: request)
    }
    
    fileprivate func fetchForks() {
        let request = ListForks.FetchForks.Request(forksCount: ForksLoadingSettings.defaultForksCount)
        interactor?.updateForks(request: request)
    }
    
    fileprivate func selectFork(atIndex: Int) {
        let request = ListForks.SelectFork.Request(forksCount: ForksLoadingSettings.defaultForksCount, index: atIndex)
        interactor?.selectFork(request: request)
    }
}

fileprivate typealias TableView = ListForksViewController
extension ListForksViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedForks.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: AvatarTableViewCell.identifier, for: indexPath) as! AvatarTableViewCell
        let fork = displayedForks[indexPath.row]
        
        let accessory = fork.isSelectable ? "\(fork.totalCount)" : ""
        cell.update(with: fork.details.avatarURL, title: fork.details.title, accessory: accessory)
        cell.accessoryType = fork.isSelectable ? .disclosureIndicator : .none
        cell.selectionStyle = fork.isSelectable ? .default : .none
        
        return cell
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return AvatarTableViewCell.defaultCellHeight
    }
    
    func registerCell() {
        tableView.register(UINib.init(nibName: "AvatarTableViewCell", bundle: nil), forCellReuseIdentifier: AvatarTableViewCell.identifier)
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        selectFork(atIndex: indexPath.row)
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    override func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        let fork = displayedForks[indexPath.row]
        
        return fork.isSelectable ? indexPath : nil
    }
}

fileprivate typealias LoadingOnScrolling = ListForksViewController
extension LoadingOnScrolling {
    override func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        let endScrolling: CGFloat = scrollView.contentOffset.y + scrollView.frame.size.height
        
        let canLoadNextPage = interactor?.canLoadNextPage() ?? false
        if canLoadNextPage && endScrolling >= scrollView.contentSize.height {
            fetchForks()
        }
    }
}

fileprivate typealias Util = ListForksViewController
fileprivate extension Util {
    func setup() {
        let viewController = self
        let interactor = ListForksInteractor()
        let presenter = ListForksPresenter()
        let router = ListForksRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

fileprivate typealias Header = ListForksViewController
extension Header {
    
    fileprivate func loadHeaderView() {
        headerView.frame = CGRect(origin: CGPoint.zero, size: CGSize(width: view.frame.width,
            height: AvatarHeaderView.standartHeight))
        
        tableView.tableHeaderView = headerView
        tableView.tableFooterView = UIView(frame: .zero)
    }
    
    fileprivate func setupHeader(viewModel: ListForks.RepoHeader.ViewModel) {
        headerView.update(with: viewModel.details.avatarURL, title: viewModel.details.title)
    }
}
