//
//  LoadForksViewController.swift
//  DUGithubForks
//
//  Created by Di on 30.11.2017.
//  Copyright (c) 2017 Di. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoadForksDisplayLogic: class {
    func displayForks(viewModel: LoadForks.FetchRepository.ViewModel)
    func displayError(viewModel: LoadForks.FetchRepository.ViewModel)
    func displayDefaultValues(viewModel: LoadForks.SetDefaultFields.ViewModel)
}

class LoadForksViewController: UIViewController {

    fileprivate enum Settings {
        static let showForksListSegueID = "ListForks"
    }

    @IBOutlet weak var repoNameTextField: UITextField!
    @IBOutlet weak var ownerNameTextField: UITextField!
    
    var interactor: LoadForksBusinessLogic?
    var router: (NSObjectProtocol & LoadForksRoutingLogic & LoadForksDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(self.handleTap))
        view.addGestureRecognizer(tapGesture)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        navigationController?.isNavigationBarHidden = true
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        
        navigationController?.isNavigationBarHidden = false
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
}

fileprivate typealias LoadingForks = LoadForksViewController
extension LoadingForks {
    @IBAction func loadForkesPressed(_ sender: UIButton) {
        loadForks()
    }
    
    fileprivate func loadForks() {
        guard let repoName = repoNameTextField.text, let ownerName = ownerNameTextField.text else {
            showFailureAlert(title: "Enter creditials", message: "Please enter repo and owner!")
            return
        }
        
        let fields = LoadForks.FormFieldes(repoName: repoName, ownerName: ownerName)
        let request = LoadForks.FetchRepository.Request(fields: fields, forksCount: ForksLoadingSettings.defaultForksCount)
        interactor?.loadForks(request: request)
    }
}

typealias DefaultFieldValues = LoadForksViewController
extension DefaultFieldValues {
    
    @IBAction func defaultButtonPressed(_ sender: UIButton) {
        loadDefaultFieldsValues()
    }
    
    fileprivate func loadDefaultFieldsValues() {
        interactor?.loadDefaultFieldValues(request: LoadForks.SetDefaultFields.Request())
    }
}

fileprivate typealias LoadForksDisplay = LoadForksViewController
extension LoadForksDisplay: LoadForksDisplayLogic {
    func displayForks(viewModel: LoadForks.FetchRepository.ViewModel) {
        performSegue(withIdentifier: Settings.showForksListSegueID, sender: self)
    }
    
    func displayError(viewModel: LoadForks.FetchRepository.ViewModel) {
        showFailureAlert(title: "Oops!", message: viewModel.errorMessage!)
    }
    
    func displayDefaultValues(viewModel: LoadForks.SetDefaultFields.ViewModel) {
        repoNameTextField.text = viewModel.fields.repoName
        ownerNameTextField.text = viewModel.fields.ownerName
    }
}

fileprivate typealias Util = LoadForksViewController
fileprivate extension Util {
    func setup() {
        let viewController = self
        let interactor = LoadForksInteractor()
        let presenter = LoadForksPresenter()
        let router = LoadForksRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func showFailureAlert(title: String, message: String) {
        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let alertAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alertController.addAction(alertAction)
        self.showDetailViewController(alertController, sender: nil)
    }
    
    @objc func handleTap(sender: UITapGestureRecognizer) {
        view.endEditing(true)
    }
}


